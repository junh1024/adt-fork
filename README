Ambisonic Decoder Toolbox
Aaron J. Heller <heller@ai.sri.com>
Menlo Park, CA  US
April 19, 2013

The Ambisonic Decoder Toolbox is a collection of MATLAB and GNU Octave
functions for creating Ambisonic Decoders. Currently, it implements
1. the AllRAD design technique [1-3],
2. the inversion or mode-matching Appendix 1 of [14],
3. truncated mode-matching
4. constant energy [15]
5. linear combinations of 2 and 3
6. Slepian function basis.

The toolbox reads loudspeaker locations from CSV files (and other
formats, including ambdec presets) and writes out presets files for
the AmbDec decoder [4] and decoders in Faust [5] that can be compiled
to VST, Supercollider, Pd, MaxDSP, ...  (see http://faust.grame.fr/
for more about Faust), and Matthias Kronlachner's ambiX plugins
(http://www.matthiaskronlachner.com/?p=2015).  By default, decoders
are written into the directory ../decoders.  This can be changed by
editing the file ambi_decoders_dir.m.

To use the code you will need to add the ./matlab directory to your
loadpath.  One way to do this is to cd to the matlab directory and
execute:
  addpath(pwd)
the cd to the examples directory

See the files ./examples/run_*.m for sample invocations.

AllRAD is a hybrid ambisonic/vbap technique, especially suited to
irregular arrays.  The basic idea is to design a decoder for a regular
array with many loudspeakers, in this case a 240 virtual loudspeaker
spherical design [6,7], and then map those signals to the real array
using Pulkki's VBAP. [8,9]

Fernando Lopez-Lezcano (at CCRMA) used it recently to generate a
decoder for a 24-loudspeaker tilted dome at Stanford's new Bing
Concert Hall, with very good results.  We've also done some listening
tests, comparing the decoder for CCRMA's Listening Room described in
our LAC2012 paper to an AllRAD decoder with favorable results.  The
former took about 2 hours of optimizer time, and the latter a few
seconds.

The Toolbox also support conventional mode matching ('pinv') [14],
mode matching with constant energy constraint [15], and linear
combinations of the two.

There are still a few loose ends -- the performance plots (rE,
directional error) work well only in MATLAB, and there needs to be bit
of sanity checking on the loudspeaker locations, but it is quite
usable.

The toolbox support all of the normalization and channel order
conventions that I am aware of at the time of this writing. [10,11].
Two mixed-order schemes are supported, the one used in AMB files [12]
and the newer one proposed by Chris Travis [13] that is used in the
preset files that are included with Ambdec.

The file format for AmbDec presets was reversed engineered from the
AmbDec source code and included presets.  If you encounter
difficulties with the AmbDec presets generated by this toolbox, please
contact me rather than Fons Adriaensen (author of AmbDec).

The ./doc directory has our Linux Audio Conference 2014 paper and
slides from the talk given May 3, 2014.  Video of the talk is archived
at http://lac.linuxaudio.org/2014/video.php?id=12

Licenses

The code in the Toolbox that has been written by me is licensed under
the Gnu Affero General Public License (see LICENSE or
http://www.gnu.org/licenses/ for a copy).  If this is an impediment to
your use of the code, please contact me with details of your
application.

Some functions and data were downloaded from other sources and covered
by other licenses.  These are listened in the AUTHORS file.

Please note that the Faust backend is capable of producing Ambisonic
decoders that may be covered by US Patent 5,757,927 and possibly
others. The AllRAD design technque was implemented from published
descriptions [1,2,3], which do not assert any intellectural property
rights.  Please consult your own legal council for any questions about
your use is this Toolbox.

References

[1] F. Zotter, M. Frank, and A. Sontacchi, “The Virtual T-Design
Ambisonics-Rig Using VBAP,” presented at the 1st EAA-EuoRegio 2010
Congress on Sound and Vibration, Ljubljana, Slovenia, 2010, pp. 1–4.

[2] F. Kaiser, “A Hybrid Approach for Three-Dimensional Sound
Spatialization,” Algorithmen in Akustik und Computermusik 2, SE, May
2011.

[3] F. Zotter and M. Frank, “All-Round Ambisonic Panning and
Decoding,” J. Audio Eng Soc, vol. 60, no. 10, pp. 807–820, Nov. 2012.

[4] F. Adriaensen, “AmbDec - 0.4.2 User Manual,”
kokkinizita.linuxaudio.org, 05-Oct-2009.

[5] J. O. Smith, “Audio Signal Processing in FAUST,” pp. 1–40,
Apr. 2013.  https://ccrma.stanford.edu/~jos/aspf/

[6] R. H. Hardin and N. J. A. Sloane, “McLaren's Improved Snub Cube
and Other New Spherical Designs in Three Dimensions,” arXiv.org,
vol. math.CO. 23-Jul-2002.

[7] R. H. Hardin and N. J. A. Sloane, "Spherical Designs,"
http://www2.research.att.com/~njas/sphdesigns/

[8] V. Pulkki, “Virtual Sound Source Positioning Using Vector Base
Amplitude Panning,” J. Audio Eng Soc, vol. 45, no. 6, pp. 456–466,
Jun. 1997.

[9] H. Choi, “An Alternative Implementation of VBAP with Graphical
Interface for Sound Motion Design,” presented at the 18th
International Conference on Auditory Display, Atlanta, 2012, pp. 1–5.

[10] D. G. Malham, “Higher order Ambisonic systems,” Mphil Thesis,
University at York, 2003.

[11] R. Furse, “3D Audio Links and Information,” Available:
http://www.muse.demon.co.uk/3daudio.html.

[12] "File Format for B-Format; The '.amb' Format,"
http://members.tripod.com/martin_leese/Ambisonic/B-Format_file_format.html

[13] C. Travis, “A New Mixed-Order Scheme for Ambisonic Signals,”
presented at the Proc. 1st Ambisonics Symposium, 2009, pp. 1–6.

[14] A. Heller, R. Lee, and E. M. Benjamin, “Is My Decoder
Ambisonic?,” AES 125th Convention, San Francisco, pp. 1–21, Dec. 2008.

$Id: README 26443 2014-01-10 00:05:16Z heller $
